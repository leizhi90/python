# -*- conding:utf-8 -*-

# 字符串格式化
# 思想：提供一个字符串模板，模板中存在相应的占位符，然后使用相应的值
#来替换模板中的占位符，同时，按照占位符中规定的格式进行显示
#优势：可以省略简化字符串的拼接，也可以控制字符串的宽度，小数位，填充字符
# 进制显示等相关操作

#python ，提供三种字符串格式化
# 1、老式格式化  %
# 2、较新的格式化，set的format方法
# 3、最新的格式化，字符串格式化常量，使用 f  F 前缀

#占位符格式
# %[(关键字)][转换标记][最小宽度][.精度]转换格式
print ('今天是%d年%d月%d日'%(2018,3,22))
#如果只有一个值
print ('今天是%d日'%22)
print ("八进制：%o"%10)
print ('十六进制%x'%10)
print ('十六进制：%X'%10)

print('%f'%10)# 默认精度为6
print ('%f,%f'%(10.4,float('infinity')))
print ('%F,%F'%(10.4,float('infinity')))
# 今天是2018年3月22日
# 今天是22日
# 八进制：12
# 十六进制a
# 十六进制：A
# 10.000000
# 10.400000,inf
# 10.400000,INF
# %E %e 使用科学计数法进行表示，
print ('%e,%E'%(3.4444,3.1415))
#3.444400e+00,3.141500E+00

# %g %G 根据情况进行显示，首先将数字转换成指数形式，如果指数幂<-4 或者>=精度值(默认为6 )，则使用指数形式表示，否则，使用十进制的形式表示，
#过于小或过于大 用指数，否则用指数 -4  6 指数大小
print ('%g,%g,%g'%(0.88,0.00003,50000000))
#0.88,3e-05,5e+07  G-->E

# %c 显示一个字符，替换值可以是一个字符或者数值（编码值，编码值会显示该码值对应的字符
print ('%c,%c'%('a',65))

#ascii str repr
#asci 将传递的内容进ascii字符的显示，返回转换之后的内容，对于非ascii字符，会进行转义
print (ascii('aaa红'))
#'aaa\u7ea2'

# str repr 都是进行字符串的显示，区别在于：str转换的字符串更接近与人的显示（显示友好，
#repr 更倾向于解释器的显示，有些类型str repr 返回内容相同

print (str('abd'))
print (repr('abd'))
# abd
# 'abd'
# %a %s  %r 格式化使用 ascii str repr 函数进行处理
# %% 转义，表示一个普通的%，一个不会被解析为占位符开始的%
print ('%a,%%a'%('opq'))
print ('%a,%%e'%('opq'))
# 'opq',%a
# 'opq',%e
#  # 转换标记
# # 在八进制 十六进制前加上必要的前缀
print ('%#o,%#x'%(100,200))
# 在 f F e E 格式下，会始终保留小数点
print ('%#.0f'%3.3)
# 保留零
print ('%#g'%300)
# 空格 ，对于正数 会留一个空格
print ('% d% d'%(10,111))
# + 对于数值类型，如果宽度不足，左侧补0
# + 对于数值类型，如果宽度不足，左侧补0



#最小宽度与精度  精度前有个.
print ('%10.4f'%1.222)

#****动态模板
#最小宽度与精度也可以不指定，使用* 占位，通过替换值元祖来进行传递
print ('%*.*f'%(10,4,1.222))
